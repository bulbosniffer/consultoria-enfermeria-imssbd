from flask import Flask, render_template, request, redirect, url_for, session, flash
import sqlite3
import bcrypt
import os

app = Flask(__name__)
app.secret_key = 'clave_secreta_segura'

DB_NAME = os.path.join(os.path.dirname(__file__), 'salud_adulto.db')

# Crear base de datos si no existe


def crear_base_datos():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # Crear tabla si no existe
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            usuario TEXT UNIQUE NOT NULL,
            contrasena TEXT NOT NULL,
            rol TEXT NOT NULL
        )
    ''')
    conn.commit()

    # Insertar usuarios predeterminados solo si la tabla está vacía
    cursor.execute("SELECT COUNT(*) FROM usuarios")
    if cursor.fetchone()[0] == 0:
        admin_pass = bcrypt.hashpw("1234".encode('utf-8'), bcrypt.gensalt())
        user_pass = bcrypt.hashpw("abcd".encode('utf-8'), bcrypt.gensalt())

        cursor.execute("INSERT INTO usuarios (usuario, contrasena, rol) VALUES (?, ?, ?)",
                       ("admin", admin_pass, "admin"))
        cursor.execute("INSERT INTO usuarios (usuario, contrasena, rol) VALUES (?, ?, ?)",
                       ("juan", user_pass, "usuario"))
        conn.commit()

    conn.close()

@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        usuario = request.form['usuario']
        contrasena = request.form['contrasena']

        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT contrasena, rol FROM usuarios WHERE usuario = ?", (usuario,))
        registro = cursor.fetchone()
        conn.close()

        # Convertir la contraseña almacenada (str) a bytes antes de usar bcrypt.checkpw
        if registro and bcrypt.checkpw(contrasena.encode('utf-8'), registro[0].encode('utf-8')):
            session['usuario'] = usuario
            session['rol'] = registro[1]
            flash('Inicio de sesión exitoso', 'info')
            return redirect(url_for('formulario'))
        else:
            flash('Credenciales incorrectas', 'error')
            return redirect(url_for('login'))

    # GET request
    return render_template('login.html')

@app.route('/formulario')
def formulario():
    if 'usuario' not in session:
        flash('Debes iniciar sesión', 'error')
        return redirect(url_for('login'))

    if session['rol'] == 'admin':
        return render_template('admin.html', usuario=session['usuario'])
    else:
        return render_template('formulario.html', usuario=session['usuario'])

@app.route('/logout')
def logout():
    session.clear()
    flash('Sesión cerrada', 'info')
    return redirect(url_for('login'))

@app.route('/registrar_usuario', methods=['GET', 'POST'])
def registrar_usuario():
    if request.method == 'POST':
        usuario = request.form['usuario']
        contrasena = request.form['contrasena']
        rol = request.form['rol']  # Por ejemplo: 'admin', 'enfermero', etc.

        # Hashear la contraseña
        hashed = bcrypt.hashpw(contrasena.encode('utf-8'), bcrypt.gensalt())
        hashed_str = hashed.decode('utf-8')

        # Conexión a la base de datos
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()

        # Verificar si el usuario ya existe
        cursor.execute("SELECT * FROM usuarios WHERE usuario = ?", (usuario,))
        if cursor.fetchone():
            conn.close()
            flash('El usuario ya existe.', 'warning')
            return redirect(url_for('registro'))

        # Insertar nuevo usuario
        cursor.execute("INSERT INTO usuarios (usuario, contrasena, rol) VALUES (?, ?, ?)",
                       (usuario, hashed_str, rol))
        conn.commit()
        conn.close()

        flash('Usuario registrado correctamente', 'success')
        return redirect(url_for('login'))

    # Si es GET, mostrar el formulario
    return render_template('registrar_usuario.html')

if __name__ == '__main__':
    crear_base_datos()
    app.run(debug=True)

